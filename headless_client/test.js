module.exports = {
    "messageGenerated": 1423774918949,
    "sessions": [{
        "sessionID": "54dd0fc8f927955405a61620",
        "submitDate": "2015-02-12T20:56:02.631Z",
        "team": "humans",
        "transpiledCode": {
            "hero-placeholder": {
                "plan": "var __interceptThis=(function(){var G=this;return function($this,sandbox){if($this==G){return sandbox;}return $this;};})();\nreturn (function(__global) {\n  var tmp0,\n      tmp1;\n  tmp1 = function() {\n    var __argIndexer,\n        __gentmp2,\n        __resulttmp2,\n        _yieldValue,\n        self,\n        tmp2,\n        tmp22,\n        tmp3,\n        tmp4;\n    var $arguments = arguments;\n    return $traceurRuntime.generatorWrap(function($ctx) {\n      while (true)\n        switch ($ctx.state) {\n          case 0:\n            'use strict';\n            $ctx.state = 20;\n            break;\n          case 20:\n            _aether.logCallStart(_aether._userInfo);\n            $ctx.state = 22;\n            break;\n          case 22:\n            ;\n            $ctx.state = 24;\n            break;\n          case 24:\n            for (__argIndexer = 0; __argIndexer < $arguments.length; ++__argIndexer)\n              $arguments[__argIndexer] = _aether.createAPIClone(_aether, $arguments[__argIndexer]);\n            $ctx.state = 26;\n            break;\n          case 26:\n            self = _aether.createAPIClone(_aether, __interceptThis(this, __global));\n            $ctx.state = 28;\n            break;\n          case 28:\n            tmp3 = function() {\n              var __argIndexer,\n                  __yieldCount0,\n                  _yieldValue,\n                  enemy,\n                  tmp10,\n                  tmp11,\n                  tmp12,\n                  tmp13,\n                  tmp14,\n                  tmp15,\n                  tmp16,\n                  tmp17,\n                  tmp18,\n                  tmp19,\n                  tmp20,\n                  tmp21,\n                  tmp5,\n                  tmp8,\n                  tmp9;\n              var $arguments = arguments;\n              return $traceurRuntime.generatorWrap(function($ctx) {\n                while (true)\n                  switch ($ctx.state) {\n                    case 0:\n                      ;\n                      $ctx.state = 129;\n                      break;\n                    case 129:\n                      for (__argIndexer = 0; __argIndexer < $arguments.length; ++__argIndexer)\n                        $arguments[__argIndexer] = _aether.createAPIClone(_aether, $arguments[__argIndexer]);\n                      $ctx.state = 131;\n                      break;\n                    case 131:\n                      _aether.logStatementStart([{\n                        ofs: 42,\n                        row: 2,\n                        col: 6\n                      }, {\n                        ofs: 46,\n                        row: 2,\n                        col: 10\n                      }]);\n                      $ctx.state = 133;\n                      break;\n                    case 133:\n                      tmp5 = true;\n                      $ctx.state = 135;\n                      break;\n                    case 135:\n                      _aether.logStatement([{\n                        ofs: 42,\n                        row: 2,\n                        col: 6\n                      }, {\n                        ofs: 46,\n                        row: 2,\n                        col: 10\n                      }], _aether._userInfo, false);\n                      $ctx.state = 137;\n                      break;\n                    case 137:\n                      if (tmp5) {\n                        $ctx.state = 115;\n                        break;\n                      } else {\n                        $ctx.state = 3;\n                        break;\n                      }\n                    case 115:\n                      __yieldCount0 = 0;\n                      $ctx.state = 116;\n                      break;\n                    case 116:\n                      tmp8 = self;\n                      $ctx.state = 85;\n                      break;\n                    case 85:\n                      tmp9 = 'findNearestEnemy';\n                      $ctx.state = 87;\n                      break;\n                    case 87:\n                      _aether.logStatementStart([{\n                        ofs: 157,\n                        row: 5,\n                        col: 4\n                      }, {\n                        ofs: 162,\n                        row: 5,\n                        col: 9\n                      }]);\n                      $ctx.state = 89;\n                      break;\n                    case 89:\n                      enemy = _aether.convertToNativeType(_aether.createAPIClone(_aether, tmp8[tmp9]()));\n                      $ctx.state = 91;\n                      break;\n                    case 91:\n                      _aether.logStatement([{\n                        ofs: 157,\n                        row: 5,\n                        col: 4\n                      }, {\n                        ofs: 162,\n                        row: 5,\n                        col: 9\n                      }], _aether._userInfo, false);\n                      $ctx.state = 93;\n                      break;\n                    case 93:\n                      if (_aether._shouldYield) {\n                        $ctx.state = 11;\n                        break;\n                      } else {\n                        $ctx.state = 18;\n                        break;\n                      }\n                    case 11:\n                      _yieldValue = _aether._shouldYield;\n                      $ctx.state = 12;\n                      break;\n                    case 12:\n                      _aether._shouldYield = false;\n                      $ctx.state = 14;\n                      break;\n                    case 14:\n                      if (this.onAetherYield) {\n                        this.onAetherYield(_yieldValue);\n                      }\n                      $ctx.state = 16;\n                      break;\n                    case 16:\n                      $ctx.state = 8;\n                      return _yieldValue;\n                    case 8:\n                      if ($ctx.action === 'throw') {\n                        $ctx.action = 'next';\n                        throw $ctx.sent;\n                      }\n                      $ctx.state = 10;\n                      break;\n                    case 10:\n                      if (typeof __yieldCount0 !== 'undefined' && __yieldCount0 !== null) {\n                        __yieldCount0++;\n                      }\n                      $ctx.state = 18;\n                      break;\n                    case 18:\n                      tmp11 = self;\n                      $ctx.state = 95;\n                      break;\n                    case 95:\n                      tmp12 = 'isReady';\n                      $ctx.state = 97;\n                      break;\n                    case 97:\n                      _aether.logStatementStart([{\n                        ofs: 214,\n                        row: 7,\n                        col: 20\n                      }, {\n                        ofs: 222,\n                        row: 7,\n                        col: 28\n                      }]);\n                      $ctx.state = 99;\n                      break;\n                    case 99:\n                      tmp13 = 'cleave';\n                      $ctx.state = 101;\n                      break;\n                    case 101:\n                      _aether.logStatement([{\n                        ofs: 214,\n                        row: 7,\n                        col: 20\n                      }, {\n                        ofs: 222,\n                        row: 7,\n                        col: 28\n                      }], _aether._userInfo, false);\n                      $ctx.state = 103;\n                      break;\n                    case 103:\n                      _aether.logStatementStart([{\n                        ofs: 201,\n                        row: 7,\n                        col: 7\n                      }, {\n                        ofs: 223,\n                        row: 7,\n                        col: 29\n                      }]);\n                      $ctx.state = 105;\n                      break;\n                    case 105:\n                      tmp10 = _aether.convertToNativeType(_aether.createAPIClone(_aether, tmp11[tmp12](_aether.restoreAPIClone(_aether, tmp13))));\n                      $ctx.state = 107;\n                      break;\n                    case 107:\n                      _aether.logStatement([{\n                        ofs: 201,\n                        row: 7,\n                        col: 7\n                      }, {\n                        ofs: 223,\n                        row: 7,\n                        col: 29\n                      }], _aether._userInfo, false);\n                      $ctx.state = 109;\n                      break;\n                    case 109:\n                      if (_aether._shouldYield) {\n                        $ctx.state = 24;\n                        break;\n                      } else {\n                        $ctx.state = 31;\n                        break;\n                      }\n                    case 24:\n                      _yieldValue = _aether._shouldYield;\n                      $ctx.state = 25;\n                      break;\n                    case 25:\n                      _aether._shouldYield = false;\n                      $ctx.state = 27;\n                      break;\n                    case 27:\n                      if (this.onAetherYield) {\n                        this.onAetherYield(_yieldValue);\n                      }\n                      $ctx.state = 29;\n                      break;\n                    case 29:\n                      $ctx.state = 21;\n                      return _yieldValue;\n                    case 21:\n                      if ($ctx.action === 'throw') {\n                        $ctx.action = 'next';\n                        throw $ctx.sent;\n                      }\n                      $ctx.state = 23;\n                      break;\n                    case 23:\n                      if (typeof __yieldCount0 !== 'undefined' && __yieldCount0 !== null) {\n                        __yieldCount0++;\n                      }\n                      $ctx.state = 31;\n                      break;\n                    case 31:\n                      if (tmp10) {\n                        $ctx.state = 46;\n                        break;\n                      } else {\n                        $ctx.state = 71;\n                        break;\n                      }\n                    case 46:\n                      tmp14 = self;\n                      $ctx.state = 47;\n                      break;\n                    case 47:\n                      tmp15 = 'cleave';\n                      $ctx.state = 49;\n                      break;\n                    case 49:\n                      tmp16 = enemy;\n                      $ctx.state = 51;\n                      break;\n                    case 51:\n                      _aether.logStatementStart([{\n                        ofs: 242,\n                        row: 9,\n                        col: 8\n                      }, {\n                        ofs: 260,\n                        row: 9,\n                        col: 26\n                      }]);\n                      $ctx.state = 53;\n                      break;\n                    case 53:\n                      tmp17 = _aether.convertToNativeType(_aether.createAPIClone(_aether, tmp14[tmp15](_aether.restoreAPIClone(_aether, tmp16))));\n                      $ctx.state = 55;\n                      break;\n                    case 55:\n                      _aether.logStatement([{\n                        ofs: 242,\n                        row: 9,\n                        col: 8\n                      }, {\n                        ofs: 260,\n                        row: 9,\n                        col: 26\n                      }], _aether._userInfo, false);\n                      $ctx.state = 57;\n                      break;\n                    case 57:\n                      if (_aether._shouldYield) {\n                        $ctx.state = 37;\n                        break;\n                      } else {\n                        $ctx.state = 6;\n                        break;\n                      }\n                    case 37:\n                      _yieldValue = _aether._shouldYield;\n                      $ctx.state = 38;\n                      break;\n                    case 38:\n                      _aether._shouldYield = false;\n                      $ctx.state = 40;\n                      break;\n                    case 40:\n                      if (this.onAetherYield) {\n                        this.onAetherYield(_yieldValue);\n                      }\n                      $ctx.state = 42;\n                      break;\n                    case 42:\n                      $ctx.state = 34;\n                      return _yieldValue;\n                    case 34:\n                      if ($ctx.action === 'throw') {\n                        $ctx.action = 'next';\n                        throw $ctx.sent;\n                      }\n                      $ctx.state = 36;\n                      break;\n                    case 36:\n                      if (typeof __yieldCount0 !== 'undefined' && __yieldCount0 !== null) {\n                        __yieldCount0++;\n                      }\n                      $ctx.state = 6;\n                      break;\n                    case 71:\n                      tmp18 = self;\n                      $ctx.state = 72;\n                      break;\n                    case 72:\n                      tmp19 = 'attack';\n                      $ctx.state = 74;\n                      break;\n                    case 74:\n                      tmp20 = enemy;\n                      $ctx.state = 76;\n                      break;\n                    case 76:\n                      _aether.logStatementStart([{\n                        ofs: 280,\n                        row: 12,\n                        col: 8\n                      }, {\n                        ofs: 298,\n                        row: 12,\n                        col: 26\n                      }]);\n                      $ctx.state = 78;\n                      break;\n                    case 78:\n                      tmp21 = _aether.convertToNativeType(_aether.createAPIClone(_aether, tmp18[tmp19](_aether.restoreAPIClone(_aether, tmp20))));\n                      $ctx.state = 80;\n                      break;\n                    case 80:\n                      _aether.logStatement([{\n                        ofs: 280,\n                        row: 12,\n                        col: 8\n                      }, {\n                        ofs: 298,\n                        row: 12,\n                        col: 26\n                      }], _aether._userInfo, false);\n                      $ctx.state = 82;\n                      break;\n                    case 82:\n                      if (_aether._shouldYield) {\n                        $ctx.state = 62;\n                        break;\n                      } else {\n                        $ctx.state = 6;\n                        break;\n                      }\n                    case 62:\n                      _yieldValue = _aether._shouldYield;\n                      $ctx.state = 63;\n                      break;\n                    case 63:\n                      _aether._shouldYield = false;\n                      $ctx.state = 65;\n                      break;\n                    case 65:\n                      if (this.onAetherYield) {\n                        this.onAetherYield(_yieldValue);\n                      }\n                      $ctx.state = 67;\n                      break;\n                    case 67:\n                      $ctx.state = 59;\n                      return _yieldValue;\n                    case 59:\n                      if ($ctx.action === 'throw') {\n                        $ctx.action = 'next';\n                        throw $ctx.sent;\n                      }\n                      $ctx.state = 61;\n                      break;\n                    case 61:\n                      if (typeof __yieldCount0 !== 'undefined' && __yieldCount0 !== null) {\n                        __yieldCount0++;\n                      }\n                      $ctx.state = 6;\n                      break;\n                    case 6:\n                      _aether.logStatementStart([{\n                        ofs: 42,\n                        row: 2,\n                        col: 6\n                      }, {\n                        ofs: 46,\n                        row: 2,\n                        col: 10\n                      }]);\n                      $ctx.state = 118;\n                      break;\n                    case 118:\n                      tmp5 = true;\n                      $ctx.state = 120;\n                      break;\n                    case 120:\n                      _aether.logStatement([{\n                        ofs: 42,\n                        row: 2,\n                        col: 6\n                      }, {\n                        ofs: 46,\n                        row: 2,\n                        col: 10\n                      }], _aether._userInfo, false);\n                      $ctx.state = 122;\n                      break;\n                    case 122:\n                      if (this.onAetherYield) {\n                        this.onAetherYield('simple loop');\n                      }\n                      $ctx.state = 124;\n                      break;\n                    case 124:\n                      if (__yieldCount0 === 0) {\n                        $ctx.state = 110;\n                        break;\n                      } else {\n                        $ctx.state = 137;\n                        break;\n                      }\n                    case 110:\n                      $ctx.state = 111;\n                      return 'simple loop...';\n                    case 111:\n                      if ($ctx.action === 'throw') {\n                        $ctx.action = 'next';\n                        throw $ctx.sent;\n                      }\n                      $ctx.state = 137;\n                      break;\n                    case 3:\n                      $ctx.state = -2;\n                      break;\n                    case -2:\n                      return $ctx;\n                    case -3:\n                      throw $ctx.storedException;\n                    default:\n                      throw 'traceur compiler bug: invalid state in state machine: ' + $ctx.state;\n                  }\n              }, this);\n            };\n            $ctx.state = 30;\n            break;\n          case 30:\n            tmp4 = 'call';\n            $ctx.state = 32;\n            break;\n          case 32:\n            tmp22 = _aether.createAPIClone(_aether, __interceptThis(this, __global));\n            $ctx.state = 34;\n            break;\n          case 34:\n            __gentmp2 = _aether.convertToNativeType(_aether.createAPIClone(_aether, tmp3[tmp4](_aether.restoreAPIClone(_aether, tmp22))));\n            $ctx.state = 36;\n            break;\n          case 36:\n            if (true) {\n              $ctx.state = 5;\n              break;\n            } else {\n              $ctx.state = 16;\n              break;\n            }\n          case 5:\n            __resulttmp2 = __gentmp2.next();\n            $ctx.state = 6;\n            break;\n          case 6:\n            if (__resulttmp2.done) {\n              $ctx.state = 9;\n              break;\n            } else {\n              $ctx.state = 8;\n              break;\n            }\n          case 9:\n            tmp2 = __resulttmp2.value;\n            $ctx.state = 16;\n            break;\n          case 8:\n            _yieldValue = __resulttmp2.value;\n            $ctx.state = 13;\n            break;\n          case 13:\n            if (this.onAetherYield) {\n              this.onAetherYield(_yieldValue);\n            }\n            $ctx.state = 15;\n            break;\n          case 15:\n            $ctx.state = 2;\n            return _yieldValue;\n          case 2:\n            if ($ctx.action === 'throw') {\n              $ctx.action = 'next';\n              throw $ctx.sent;\n            }\n            $ctx.state = 36;\n            break;\n          case 16:\n            ;\n            $ctx.state = 38;\n            break;\n          case 38:\n            _aether.logCallEnd();\n            $ctx.state = 40;\n            break;\n          case 40:\n            $ctx.returnValue = _aether.restoreAPIClone(_aether, tmp2);\n            $ctx.state = -2;\n            break;\n          case -2:\n            return $ctx;\n          case -3:\n            throw $ctx.storedException;\n          default:\n            throw 'traceur compiler bug: invalid state in state machine: ' + $ctx.state;\n        }\n    }, this);\n  };\n  tmp0 = 'plan';\n  __global[tmp0] = tmp1;\n}(this));\n"
            }
        },
        "submittedCodeLanguage": "python",
        "teamSpells": {
            "humans": ["hero-placeholder/plan"],
            "ogres": ["hero-placeholder-1/plan"]
        },
        "levelID": "dueling-grounds",
        "creator": "54d520a09136715505d15297",
        "totalScore": 40.47590719392207
    }, {
        "sessionID": "548881e93ab3c0ba091631b0",
        "submitDate": "2014-12-10T17:27:26.031Z",
        "team": "ogres",
        "transpiledCode": {
            "hero-placeholder-1": {
                "plan": "var __interceptThis=(function(){var G=this;return function($this,sandbox){if($this==G){return sandbox;}return $this;};})();\nreturn (function(__global) {\n  var tmp0,\n      tmp1;\n  tmp1 = function() {\n    var __argIndexer,\n        __yieldCount0,\n        _yieldValue,\n        tmp10,\n        tmp11,\n        tmp12,\n        tmp13,\n        tmp14,\n        tmp15,\n        tmp16,\n        tmp17,\n        tmp18,\n        tmp19,\n        tmp2,\n        tmp20,\n        tmp21,\n        tmp22,\n        tmp23,\n        tmp24,\n        tmp25,\n        tmp26,\n        tmp27,\n        tmp28,\n        tmp29,\n        tmp30,\n        tmp31,\n        tmp32,\n        tmp33,\n        tmp34,\n        tmp35,\n        tmp36,\n        tmp5,\n        tmp6,\n        tmp7,\n        tmp8,\n        tmp9;\n    var $arguments = arguments;\n    return $traceurRuntime.generatorWrap(function($ctx) {\n      while (true)\n        switch ($ctx.state) {\n          case 0:\n            'use strict';\n            $ctx.state = 158;\n            break;\n          case 158:\n            _aether.logCallStart(_aether._userInfo);\n            $ctx.state = 160;\n            break;\n          case 160:\n            ;\n            $ctx.state = 162;\n            break;\n          case 162:\n            for (__argIndexer = 0; __argIndexer < $arguments.length; ++__argIndexer)\n              $arguments[__argIndexer] = _aether.createAPIClone(_aether, $arguments[__argIndexer]);\n            $ctx.state = 164;\n            break;\n          case 164:\n            _aether.logStatementStart([{\n              ofs: 44,\n              row: 2,\n              col: 7\n            }, {\n              ofs: 48,\n              row: 2,\n              col: 11\n            }]);\n            $ctx.state = 166;\n            break;\n          case 166:\n            tmp2 = true;\n            $ctx.state = 168;\n            break;\n          case 168:\n            _aether.logStatement([{\n              ofs: 44,\n              row: 2,\n              col: 7\n            }, {\n              ofs: 48,\n              row: 2,\n              col: 11\n            }], _aether._userInfo, false);\n            $ctx.state = 170;\n            break;\n          case 170:\n            if (tmp2) {\n              $ctx.state = 144;\n              break;\n            } else {\n              $ctx.state = 3;\n              break;\n            }\n          case 144:\n            __yieldCount0 = 0;\n            $ctx.state = 145;\n            break;\n          case 145:\n            tmp7 = _aether.createAPIClone(_aether, __interceptThis(this, __global));\n            $ctx.state = 112;\n            break;\n          case 112:\n            tmp8 = 'findNearestEnemy';\n            $ctx.state = 114;\n            break;\n          case 114:\n            _aether.logStatementStart([{\n              ofs: 152,\n              row: 5,\n              col: 4\n            }, {\n              ofs: 184,\n              row: 5,\n              col: 36\n            }]);\n            $ctx.state = 116;\n            break;\n          case 116:\n            tmp6 = _aether.convertToNativeType(_aether.createAPIClone(_aether, tmp7[tmp8]()));\n            $ctx.state = 118;\n            break;\n          case 118:\n            _aether.logStatement([{\n              ofs: 152,\n              row: 5,\n              col: 4\n            }, {\n              ofs: 184,\n              row: 5,\n              col: 36\n            }], _aether._userInfo, false);\n            $ctx.state = 120;\n            break;\n          case 120:\n            if (_aether._shouldYield) {\n              $ctx.state = 11;\n              break;\n            } else {\n              $ctx.state = 18;\n              break;\n            }\n          case 11:\n            _yieldValue = _aether._shouldYield;\n            $ctx.state = 12;\n            break;\n          case 12:\n            _aether._shouldYield = false;\n            $ctx.state = 14;\n            break;\n          case 14:\n            if (this.onAetherYield) {\n              this.onAetherYield(_yieldValue);\n            }\n            $ctx.state = 16;\n            break;\n          case 16:\n            $ctx.state = 8;\n            return _yieldValue;\n          case 8:\n            if ($ctx.action === 'throw') {\n              $ctx.action = 'next';\n              throw $ctx.sent;\n            }\n            $ctx.state = 10;\n            break;\n          case 10:\n            if (typeof __yieldCount0 !== 'undefined' && __yieldCount0 !== null) {\n              __yieldCount0++;\n            }\n            $ctx.state = 18;\n            break;\n          case 18:\n            _aether.logStatementStart([{\n              ofs: 152,\n              row: 5,\n              col: 4\n            }, {\n              ofs: 183,\n              row: 5,\n              col: 35\n            }]);\n            $ctx.state = 122;\n            break;\n          case 122:\n            tmp5 = 'enemy';\n            $ctx.state = 124;\n            break;\n          case 124:\n            _aether.logStatement([{\n              ofs: 152,\n              row: 5,\n              col: 4\n            }, {\n              ofs: 183,\n              row: 5,\n              col: 35\n            }], _aether._userInfo, false);\n            $ctx.state = 126;\n            break;\n          case 126:\n            _aether.logStatementStart([{\n              ofs: 152,\n              row: 5,\n              col: 4\n            }, {\n              ofs: 183,\n              row: 5,\n              col: 35\n            }]);\n            $ctx.state = 128;\n            break;\n          case 128:\n            __global[tmp5] = tmp6;\n            $ctx.state = 130;\n            break;\n          case 130:\n            _aether.logStatement([{\n              ofs: 152,\n              row: 5,\n              col: 4\n            }, {\n              ofs: 183,\n              row: 5,\n              col: 35\n            }], _aether._userInfo, false);\n            $ctx.state = 132;\n            break;\n          case 132:\n            tmp10 = 'enemy';\n            $ctx.state = 134;\n            break;\n          case 134:\n            tmp11 = tmp10 in __global;\n            $ctx.state = 136;\n            break;\n          case 136:\n            if (tmp11) {\n              tmp9 = __global[tmp10];\n            } else {\n              _aether.logStatementStart([{\n                ofs: 192,\n                row: 6,\n                col: 7\n              }, {\n                ofs: 197,\n                row: 6,\n                col: 12\n              }]);\n              tmp12 = 'ReferenceError';\n              tmp13 = __global[tmp12];\n              tmp14 = new tmp13('ReferenceError: ' + (tmp10 + ' is not defined'));\n              throw tmp14;\n              _aether.logStatement([{\n                ofs: 192,\n                row: 6,\n                col: 7\n              }, {\n                ofs: 197,\n                row: 6,\n                col: 12\n              }], _aether._userInfo, false);\n            }\n            $ctx.state = 138;\n            break;\n          case 138:\n            if (tmp9) {\n              $ctx.state = 92;\n              break;\n            } else {\n              $ctx.state = 108;\n              break;\n            }\n          case 92:\n            tmp16 = _aether.createAPIClone(_aether, __interceptThis(this, __global));\n            $ctx.state = 93;\n            break;\n          case 93:\n            tmp17 = 'isReady';\n            $ctx.state = 95;\n            break;\n          case 95:\n            _aether.logStatementStart([{\n              ofs: 224,\n              row: 7,\n              col: 24\n            }, {\n              ofs: 232,\n              row: 7,\n              col: 32\n            }]);\n            $ctx.state = 97;\n            break;\n          case 97:\n            tmp18 = 'cleave';\n            $ctx.state = 99;\n            break;\n          case 99:\n            _aether.logStatement([{\n              ofs: 224,\n              row: 7,\n              col: 24\n            }, {\n              ofs: 232,\n              row: 7,\n              col: 32\n            }], _aether._userInfo, false);\n            $ctx.state = 101;\n            break;\n          case 101:\n            _aether.logStatementStart([{\n              ofs: 211,\n              row: 7,\n              col: 11\n            }, {\n              ofs: 233,\n              row: 7,\n              col: 33\n            }]);\n            $ctx.state = 103;\n            break;\n          case 103:\n            tmp15 = _aether.convertToNativeType(_aether.createAPIClone(_aether, tmp16[tmp17](_aether.restoreAPIClone(_aether, tmp18))));\n            $ctx.state = 105;\n            break;\n          case 105:\n            _aether.logStatement([{\n              ofs: 211,\n              row: 7,\n              col: 11\n            }, {\n              ofs: 233,\n              row: 7,\n              col: 33\n            }], _aether._userInfo, false);\n            $ctx.state = 107;\n            break;\n          case 107:\n            if (_aether._shouldYield) {\n              $ctx.state = 24;\n              break;\n            } else {\n              $ctx.state = 31;\n              break;\n            }\n          case 24:\n            _yieldValue = _aether._shouldYield;\n            $ctx.state = 25;\n            break;\n          case 25:\n            _aether._shouldYield = false;\n            $ctx.state = 27;\n            break;\n          case 27:\n            if (this.onAetherYield) {\n              this.onAetherYield(_yieldValue);\n            }\n            $ctx.state = 29;\n            break;\n          case 29:\n            $ctx.state = 21;\n            return _yieldValue;\n          case 21:\n            if ($ctx.action === 'throw') {\n              $ctx.action = 'next';\n              throw $ctx.sent;\n            }\n            $ctx.state = 23;\n            break;\n          case 23:\n            if (typeof __yieldCount0 !== 'undefined' && __yieldCount0 !== null) {\n              __yieldCount0++;\n            }\n            $ctx.state = 31;\n            break;\n          case 31:\n            if (tmp15) {\n              $ctx.state = 46;\n              break;\n            } else {\n              $ctx.state = 75;\n              break;\n            }\n          case 46:\n            tmp19 = _aether.createAPIClone(_aether, __interceptThis(this, __global));\n            $ctx.state = 47;\n            break;\n          case 47:\n            tmp20 = 'cleave';\n            $ctx.state = 49;\n            break;\n          case 49:\n            tmp22 = 'enemy';\n            $ctx.state = 51;\n            break;\n          case 51:\n            tmp23 = tmp22 in __global;\n            $ctx.state = 53;\n            break;\n          case 53:\n            if (tmp23) {\n              tmp21 = __global[tmp22];\n            } else {\n              _aether.logStatementStart([{\n                ofs: 260,\n                row: 8,\n                col: 24\n              }, {\n                ofs: 265,\n                row: 8,\n                col: 29\n              }]);\n              tmp24 = 'ReferenceError';\n              tmp25 = __global[tmp24];\n              tmp26 = new tmp25('ReferenceError: ' + (tmp22 + ' is not defined'));\n              throw tmp26;\n              _aether.logStatement([{\n                ofs: 260,\n                row: 8,\n                col: 24\n              }, {\n                ofs: 265,\n                row: 8,\n                col: 29\n              }], _aether._userInfo, false);\n            }\n            $ctx.state = 55;\n            break;\n          case 55:\n            _aether.logStatementStart([{\n              ofs: 248,\n              row: 8,\n              col: 12\n            }, {\n              ofs: 266,\n              row: 8,\n              col: 30\n            }]);\n            $ctx.state = 57;\n            break;\n          case 57:\n            tmp27 = _aether.convertToNativeType(_aether.createAPIClone(_aether, tmp19[tmp20](_aether.restoreAPIClone(_aether, tmp21))));\n            $ctx.state = 59;\n            break;\n          case 59:\n            _aether.logStatement([{\n              ofs: 248,\n              row: 8,\n              col: 12\n            }, {\n              ofs: 266,\n              row: 8,\n              col: 30\n            }], _aether._userInfo, false);\n            $ctx.state = 61;\n            break;\n          case 61:\n            if (_aether._shouldYield) {\n              $ctx.state = 37;\n              break;\n            } else {\n              $ctx.state = 6;\n              break;\n            }\n          case 37:\n            _yieldValue = _aether._shouldYield;\n            $ctx.state = 38;\n            break;\n          case 38:\n            _aether._shouldYield = false;\n            $ctx.state = 40;\n            break;\n          case 40:\n            if (this.onAetherYield) {\n              this.onAetherYield(_yieldValue);\n            }\n            $ctx.state = 42;\n            break;\n          case 42:\n            $ctx.state = 34;\n            return _yieldValue;\n          case 34:\n            if ($ctx.action === 'throw') {\n              $ctx.action = 'next';\n              throw $ctx.sent;\n            }\n            $ctx.state = 36;\n            break;\n          case 36:\n            if (typeof __yieldCount0 !== 'undefined' && __yieldCount0 !== null) {\n              __yieldCount0++;\n            }\n            $ctx.state = 6;\n            break;\n          case 75:\n            tmp28 = _aether.createAPIClone(_aether, __interceptThis(this, __global));\n            $ctx.state = 76;\n            break;\n          case 76:\n            tmp29 = 'attack';\n            $ctx.state = 78;\n            break;\n          case 78:\n            tmp31 = 'enemy';\n            $ctx.state = 80;\n            break;\n          case 80:\n            tmp32 = tmp31 in __global;\n            $ctx.state = 82;\n            break;\n          case 82:\n            if (tmp32) {\n              tmp30 = __global[tmp31];\n            } else {\n              _aether.logStatementStart([{\n                ofs: 319,\n                row: 11,\n                col: 24\n              }, {\n                ofs: 324,\n                row: 11,\n                col: 29\n              }]);\n              tmp33 = 'ReferenceError';\n              tmp34 = __global[tmp33];\n              tmp35 = new tmp34('ReferenceError: ' + (tmp31 + ' is not defined'));\n              throw tmp35;\n              _aether.logStatement([{\n                ofs: 319,\n                row: 11,\n                col: 24\n              }, {\n                ofs: 324,\n                row: 11,\n                col: 29\n              }], _aether._userInfo, false);\n            }\n            $ctx.state = 84;\n            break;\n          case 84:\n            _aether.logStatementStart([{\n              ofs: 307,\n              row: 11,\n              col: 12\n            }, {\n              ofs: 325,\n              row: 11,\n              col: 30\n            }]);\n            $ctx.state = 86;\n            break;\n          case 86:\n            tmp36 = _aether.convertToNativeType(_aether.createAPIClone(_aether, tmp28[tmp29](_aether.restoreAPIClone(_aether, tmp30))));\n            $ctx.state = 88;\n            break;\n          case 88:\n            _aether.logStatement([{\n              ofs: 307,\n              row: 11,\n              col: 12\n            }, {\n              ofs: 325,\n              row: 11,\n              col: 30\n            }], _aether._userInfo, false);\n            $ctx.state = 90;\n            break;\n          case 90:\n            if (_aether._shouldYield) {\n              $ctx.state = 66;\n              break;\n            } else {\n              $ctx.state = 6;\n              break;\n            }\n          case 66:\n            _yieldValue = _aether._shouldYield;\n            $ctx.state = 67;\n            break;\n          case 67:\n            _aether._shouldYield = false;\n            $ctx.state = 69;\n            break;\n          case 69:\n            if (this.onAetherYield) {\n              this.onAetherYield(_yieldValue);\n            }\n            $ctx.state = 71;\n            break;\n          case 71:\n            $ctx.state = 63;\n            return _yieldValue;\n          case 63:\n            if ($ctx.action === 'throw') {\n              $ctx.action = 'next';\n              throw $ctx.sent;\n            }\n            $ctx.state = 65;\n            break;\n          case 65:\n            if (typeof __yieldCount0 !== 'undefined' && __yieldCount0 !== null) {\n              __yieldCount0++;\n            }\n            $ctx.state = 6;\n            break;\n          case 108:\n            {\n              ;\n            }\n            $ctx.state = 6;\n            break;\n          case 6:\n            _aether.logStatementStart([{\n              ofs: 44,\n              row: 2,\n              col: 7\n            }, {\n              ofs: 48,\n              row: 2,\n              col: 11\n            }]);\n            $ctx.state = 147;\n            break;\n          case 147:\n            tmp2 = true;\n            $ctx.state = 149;\n            break;\n          case 149:\n            _aether.logStatement([{\n              ofs: 44,\n              row: 2,\n              col: 7\n            }, {\n              ofs: 48,\n              row: 2,\n              col: 11\n            }], _aether._userInfo, false);\n            $ctx.state = 151;\n            break;\n          case 151:\n            if (this.onAetherYield) {\n              this.onAetherYield('simple loop');\n            }\n            $ctx.state = 153;\n            break;\n          case 153:\n            if (__yieldCount0 === 0) {\n              $ctx.state = 139;\n              break;\n            } else {\n              $ctx.state = 170;\n              break;\n            }\n          case 139:\n            $ctx.state = 140;\n            return 'simple loop...';\n          case 140:\n            if ($ctx.action === 'throw') {\n              $ctx.action = 'next';\n              throw $ctx.sent;\n            }\n            $ctx.state = 170;\n            break;\n          case 3:\n            _aether.logCallEnd();\n            $ctx.state = 172;\n            break;\n          case 172:\n            $ctx.state = -2;\n            break;\n          case -2:\n            return $ctx;\n          case -3:\n            throw $ctx.storedException;\n          default:\n            throw 'traceur compiler bug: invalid state in state machine: ' + $ctx.state;\n        }\n    }, this);\n  };\n  tmp0 = 'plan';\n  __global[tmp0] = tmp1;\n}(this));\n"
            }
        },
        "submittedCodeLanguage": "javascript",
        "teamSpells": {
            "humans": ["hero-placeholder/plan"],
            "ogres": ["hero-placeholder-1/plan"]
        },
        "levelID": "dueling-grounds",
        "creator": "5481b0fab5cf8a5f052ab62c",
        "creatorName": "Lukucio Skriaudejas",
        "totalScore": 29.794723041533086
    }],
    "taskID": "54dd14c68bf17b9b05a92592",
    "receiptHandle": "cbb4bc48f52de5f52dc38303ed960c0fc856ae61"
}
